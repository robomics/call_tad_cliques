# Copyright (c) 2024 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Build Dockerfile

on:
  workflow_call:
    inputs:
      dockerfile-glob:
        required: true
        type: string

    outputs:
      image:
        description: "Docker image ID"
        value: ${{ jobs.build-dockerfile.outputs.imageid }}

jobs:
  collect-metadata:
    name: Collect Metadata
    runs-on: ubuntu-latest
    outputs:
      dockerfile: ${{ steps.metadata.outputs.dockerfile }}
      name: ${{ steps.metadata.outputs.name }}
      version: ${{ steps.metadata.outputs.version }}
      push: ${{ steps.metadata.outputs.push }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ github.event_name != 'pull_request' }}
        with:
          ref: ${{ github.sha }}

      - name: Checkout (PR)
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Collect metadata
        id: metadata
        run: |
          dockerfile=(${{ inputs.dockerfile-glob }})

          dockerfile_name="$(basename "${dockerfile[*]}" .Dockerfile)"
          name="$(echo "$dockerfile_name" | sed -E 's/(.*)__.*/\1/')"
          version="$(echo "$dockerfile_name" | sed -E 's/.*__v(.*)/\1/')"

          push=${{ github.event_name != 'pull_request' }}
          if test ${{ github.event_name }} == 'pull_request' && \
             test ${{ github.event.pull_request.author_association }} == 'COLLABORATOR' && \
             git log --format=%B -n 1 | grep -qF '[ci push]';
          then
            push=true
          fi

          echo "dockerfile=${dockerfile[*]}" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "push=$push" >> $GITHUB_OUTPUT

  build-dockerfile:
    name: Build ${{ needs.collect-metadata.outputs.name }} Dockerfile
    runs-on: ubuntu-latest
    needs: [collect-metadata]

    outputs:
      imageid: ${{ steps.docker-build-outputs.imageid }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate tags
        id: generate-tags
        working-directory: ${{ github.workspace }}/containers
        run: |
          base_tag="ghcr.io/${{ github.repository }}/${{ needs.collect-metadata.outputs.name }}"

          tags="$base_tag:${{ needs.collect-metadata.outputs.version }}"
          tags+=",$base_tag:latest"
          tags+=",$base_tag:$(git rev-parse --short HEAD)"

          echo "Tags: $tags"
          echo "tags=$tags" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # with:
        #  platforms: linux/amd64,linux/arm64

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: arm64

      - name: Build Docker image and push to registries
        id: docker-build
        uses: docker/build-push-action@v6
        with:
          push: ${{ needs.collect-metadata.outputs.push }}
          cache-from: type=gha,scope=${{ needs.collect-metadata.outputs.dockerfile }}
          cache-to: type=gha,mode=min,scope=${{ needs.collect-metadata.outputs.dockerfile }}
          tags: ${{ steps.generate-tags.outputs.tags }}
          file: ${{ needs.collect-metadata.outputs.dockerfile }}
          platforms: linux/amd64 #,linux/arm64
          build-args: |
            CONTAINER_VERSION=${{ needs.collect-metadata.outputs.version }}
            CONTAINER_TITLE=${{ needs.collect-metadata.outputs.name }}
