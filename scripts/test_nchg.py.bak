#!/usr/bin/env python3

import sys

import cooler
import numpy as np
import pandas as pd


def fetch_diff(m1, m2, query1, query2=None):
    if query2 is None:
        query2 = query1

    df = pd.merge(
        m1.matrix(balance=False, as_pixels=True, join=True).fetch(query1, query2),
        m2.matrix(balance=False, as_pixels=True, join=True).fetch(query1, query2),
        on=["chrom1", "start1", "end1", "chrom2", "start2", "end2"],
        how="outer",
        suffixes=("_l", "_r"),
    )
    df["count"] = np.nan_to_num(df["count_l"] - df["count_r"])

    return df[df["count"] != 0].drop(columns=["count_l", "count_r"])


def fetch_ratio(m1, m2, query1, query2=None):
    if query2 is None:
        query2 = query1

    df = pd.merge(
        m1.matrix(balance=False, as_pixels=True, join=True).fetch(query1, query2),
        m2.matrix(balance=False, as_pixels=True, join=True).fetch(query1, query2),
        on=["chrom1", "start1", "end1", "chrom2", "start2", "end2"],
        how="outer",
        suffixes=("_l", "_r"),
    )
    df["count"] = np.nan_to_num(df["count_l"] / df["count_r"])

    return df[df["count"] != 0].drop(columns=["count_l", "count_r"])


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} matrix1.cool matrix2.cool")
        sys.exit(1)

    m1 = cooler.Cooler(sys.argv[1])
    m2 = cooler.Cooler(sys.argv[2])

    assert m1.binsize == m2.binsize

    chroms = m1.chromsizes
    for (i, (chrom1, size1)) in enumerate(chroms.items()):
        for (chrom2, size2) in list(chroms.items())[i:]:
            diff = fetch_ratio(m1, m2, f"{chrom1}:0-{size1}", f"{chrom2}:0-{size2}")
            diff.to_csv(sys.stdout, sep="\t", index=False, header=False)
