// Copyright (C) 2022 Roberto Rossini <roberros@uio.no>
//
// SPDX-License-Identifier: MIT

params {
    sample_sheet  = null  // required when 'cooler_cis' and 'cooler_trans' are undefined
    sample        = null  // required when 'sample_sheet' is undefined
    cooler_cis    = null  // required when 'sample_sheet' is undefined
    cooler_trans  = null  // required when 'sample_sheet' is undefined
    tads          = null
    outdir        = "results/"

    cytoband      = null  // optional but recommended
    assembly_gaps = null  // optional but recommended

    cis_log_ratio      = 2.0
    cis_fdr            = 0.01
    trans_log_ratio    = 2.0
    trans_fdr          = 0.01
    clique_size_thresh = 5

    // Compression level used to compress intermediate files
    zstd_compression_lvl = 8
}

process {
    container = 'ghcr.io/robomics/call_tad_cliques:main'
}

includeConfig 'config/base.config'

// Source: https://github.com/nf-core/rnaseq/blob/f801b1eda588b5247a027806562dc880f872a981/nextflow.config
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
