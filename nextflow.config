// Copyright (C) 2022 Roberto Rossini <roberros@uio.no>
//
// SPDX-License-Identifier: MIT

params {
    sample_sheet     = null  // required when 'hic_file' is undefined
    resolution       = null  // required when 'sample_sheet' is undefined
    sample           = null  // required when 'sample_sheet' is undefined
    hic_file         = null  // required when 'sample_sheet' is undefined
    tads             = null
    outdir           = "results/"
    publish_dir_mode = 'copy'

    cytoband      = null  // optional but recommended
    assembly_gaps = null  // optional but recommended
    custom_mask   = null

    hicexplorer_hic_norm  = 'SCALE'
    hicexplorer_cool_norm = 'weight'

    clique_size_thresh = 3

    nchg_mad_max          = 5
    nchg_bad_bin_fraction = 0.1
    nchg_fdr              = 0.01
    nchg_log_ratio        = 2.0

    // Compression level used to compress intermediate files
    zstd_compression_lvl = 8
}

process {
    container = 'containers/cache/robomics-call_tad_cliques-utils-1.0.0.img'

    withName:"SAMPLESHEET:CHECK_SYNTAX" {
        container = 'containers/cache/robomics-call_tad_cliques-hictkpy-0.0.5.img'
    }
    withName:"SAMPLESHEET:CHECK_FILES" {
        container = 'containers/cache/robomics-call_tad_cliques-hictkpy-0.0.5.img'
    }

    withName:"TADS:SELECT_NORMALIZATION_METHOD" {
        container = 'containers/cache/robomics-call_tad_cliques-hictkpy-0.0.5.img'
    }
    withName:"TADS:APPLY_NORMALIZATION" {
        container = 'containers/cache/robomics-call_tad_cliques-hictkpy-0.0.5.img'
    }
    withName:"TADS:HICEXPLORER_FIND_TADS" {
        container = 'containers/cache/robomics-call_tad_cliques-hicexplorer-3.7.4.img'
    }

    withName:"NCHG:GENERATE_MASK" {
        container = 'containers/cache/robomics-call_tad_cliques-bedtools-2.31.1.img'
    }
    withName:"NCHG:MASK_DOMAINS" {
        container = 'containers/cache/robomics-call_tad_cliques-bedtools-2.31.1.img'
    }
    withName:"NCHG:COMPUTE" {
        container = 'containers/cache/robomics-call_tad_cliques-nchg-c77e3e9.img'
    }
    withName:"NCHG:MERGE" {
        container = 'containers/cache/robomics-call_tad_cliques-nchg-c77e3e9.img'
    }
    withName:"NCHG:FILTER" {
        container = 'containers/cache/robomics-call_tad_cliques-nchg-c77e3e9.img'
    }
    withName:"NCHG:VIEW" {
        container = 'containers/cache/robomics-call_tad_cliques-nchg-c77e3e9.img'
    }

    withName:"CLIQUES:CALL" {
        container = 'containers/cache/robomics-call_tad_cliques-call-cliques-1.0.0.img'
    }
    withName:"CLIQUES:PLOT_MAXIMAL_CLIQUE_SIZE" {
        container = 'containers/cache/robomics-call_tad_cliques-plotting-1.0.0.img'
    }

}

includeConfig 'config/base.config'

// Source: https://github.com/nf-core/rnaseq/blob/f801b1eda588b5247a027806562dc880f872a981/nextflow.config
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
